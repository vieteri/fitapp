{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function middleware(req: NextRequest) {\n  const { pathname } = req.nextUrl;\n  \n  // Public routes that don't require authentication\n  const publicRoutes = ['/sign-in', '/sign-up', '/forgot-password'];\n  \n  // Protected routes that require authentication\n  const protectedRoutes = ['/profile', '/workouts', '/routines', '/protected'];\n  \n  const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route));\n  const isPublicRoute = publicRoutes.some(route => pathname === route);\n\n  // Allow access to public routes\n  if (isPublicRoute) {\n    return NextResponse.next();\n  }\n\n  // For protected routes, let the client-side handle authentication\n  if (isProtectedRoute) {\n    // The actual authentication check will be done on the client side\n    // using the AuthProvider context\n    return NextResponse.next();\n  }\n\n  // For all other routes, proceed normally\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    '/profile/:path*',\n    '/workouts/:path*',\n    '/routines/:path*',\n    '/protected/:path*',\n    '/sign-in',\n    '/sign-up',\n    '/forgot-password'\n  ]\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,eAAe,WAAW,GAAgB;IAC/C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,kDAAkD;IAClD,MAAM,eAAe;QAAC;QAAY;QAAY;KAAmB;IAEjE,+CAA+C;IAC/C,MAAM,kBAAkB;QAAC;QAAY;QAAa;QAAa;KAAa;IAE5E,MAAM,mBAAmB,gBAAgB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IAC3E,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,aAAa;IAE9D,gCAAgC;IAChC,IAAI,eAAe;QACjB,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,kEAAkE;IAClE,IAAI,kBAAkB;QACpB,kEAAkE;QAClE,iCAAiC;QACjC,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,yCAAyC;IACzC,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;QACA;QACA;QACA;QACA;QACA;QACA;KACD;AACH"}}]
}